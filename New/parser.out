Created by PLY version 3.7 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     empty -> <empty>
Rule 2     program -> variable_declarations procedure_definition_list
Rule 3     procedure_definition_list -> procedure_definition procedure_definition_list
Rule 4     procedure_definition_list -> empty
Rule 5     procedure_definition -> NAME ( def_parameters ) { variable_declarations ex_statement_list return_stat }
Rule 6     def_parameters -> VAR ppointer_var def_parameter_list
Rule 7     def_parameters -> empty
Rule 8     def_parameter_list -> , def_parameters
Rule 9     def_parameter_list -> empty
Rule 10    call_parameters -> ppointer_var call_parameter_list
Rule 11    call_parameters -> empty
Rule 12    call_parameter_list -> , call_parameters
Rule 13    call_parameter_list -> empty
Rule 14    variable_declarations -> variable_declaration_list
Rule 15    variable_declaration_list -> empty
Rule 16    variable_declaration_list -> variable_declaration variable_declaration_list
Rule 17    variable_declaration -> VAR var_list ;
Rule 18    var_list -> ppointer_var
Rule 19    var_list -> var_list , ppointer_var
Rule 20    var_list -> variable
Rule 21    var_list -> var_list , variable
Rule 22    pointer_variable -> POINTER_OP variable
Rule 23    ppointer_var -> POINTER_OP ppointer_var
Rule 24    ppointer_var -> pointer_variable
Rule 25    addr_var -> ADDRESS_OP variable
Rule 26    ex_statement_list -> empty
Rule 27    ex_statement_list -> statement ex_statement_list
Rule 28    statement -> assignment_statement
Rule 29    statement -> cond_goto
Rule 30    statement -> uncond_goto
Rule 31    statement -> use_stat
Rule 32    statement -> label
Rule 33    statement -> procedure_call
Rule 34    assignment_statement -> expression_term ASSIGN_OP arith_expression ;
Rule 35    arith_expression -> arith_expression + arith_expression
Rule 36    arith_expression -> arith_expression - arith_expression
Rule 37    arith_expression -> expression_term
Rule 38    expression_term -> variable
Rule 39    expression_term -> ppointer_var
Rule 40    expression_term -> addr_var
Rule 41    expression_term -> constant
Rule 42    expression_term -> procedure_call
Rule 43    cond_goto -> IF ( ) if_cond_goto
Rule 44    uncond_goto -> GOTO label
Rule 45    if_cond_goto -> GOTO label
Rule 46    procedure_call -> NAME ( call_parameters ) ;
Rule 47    variable -> NAME
Rule 48    variable -> arr_var
Rule 49    arr_var -> NAME [ NUM ]
Rule 50    constant -> NUM
Rule 51    return_stat -> RETURN ppointer_var ;
Rule 52    return_stat -> RETURN addr_var ;
Rule 53    return_stat -> RETURN variable ;
Rule 54    return_stat -> empty
Rule 55    use_stat -> USE ( ppointer_var ) ;
Rule 56    label -> < BB NUM > :

Terminals, with rules where they appear

(                    : 5 43 46 55
)                    : 5 43 46 55
+                    : 35
,                    : 8 12 19 21
-                    : 36
:                    : 56
;                    : 17 34 46 51 52 53 55
<                    : 56
>                    : 56
ADDRESS_OP           : 25
ASSIGN_OP            : 34
BB                   : 56
GOTO                 : 44 45
IF                   : 43
NAME                 : 5 46 47 49
NUM                  : 49 50 56
POINTER_OP           : 22 23
RETURN               : 51 52 53
USE                  : 55
VAR                  : 6 17
[                    : 49
]                    : 49
error                : 
{                    : 5
}                    : 5

Nonterminals, with rules where they appear

addr_var             : 40 52
arith_expression     : 34 35 35 36 36
arr_var              : 48
assignment_statement : 28
call_parameter_list  : 10
call_parameters      : 12 46
cond_goto            : 29
constant             : 41
def_parameter_list   : 6
def_parameters       : 5 8
empty                : 4 7 9 11 13 15 26 54
ex_statement_list    : 5 27
expression_term      : 34 37
if_cond_goto         : 43
label                : 32 44 45
pointer_variable     : 24
ppointer_var         : 6 10 18 19 23 39 51 55
procedure_call       : 33 42
procedure_definition : 3
procedure_definition_list : 2 3
program              : 0
return_stat          : 5
statement            : 27
uncond_goto          : 30
use_stat             : 31
var_list             : 17 19 21
variable             : 20 21 22 25 38 53
variable_declaration : 16
variable_declaration_list : 14 16
variable_declarations : 2 5

Parsing method: LALR

state 0

    (0) S' -> . program
    (2) program -> . variable_declarations procedure_definition_list
    (14) variable_declarations -> . variable_declaration_list
    (15) variable_declaration_list -> . empty
    (16) variable_declaration_list -> . variable_declaration variable_declaration_list
    (1) empty -> .
    (17) variable_declaration -> . VAR var_list ;

    NAME            reduce using rule 1 (empty -> .)
    $end            reduce using rule 1 (empty -> .)
    VAR             shift and go to state 5

    variable_declaration           shift and go to state 1
    variable_declaration_list      shift and go to state 2
    empty                          shift and go to state 3
    program                        shift and go to state 4
    variable_declarations          shift and go to state 6

state 1

    (16) variable_declaration_list -> variable_declaration . variable_declaration_list
    (15) variable_declaration_list -> . empty
    (16) variable_declaration_list -> . variable_declaration variable_declaration_list
    (1) empty -> .
    (17) variable_declaration -> . VAR var_list ;

    NAME            reduce using rule 1 (empty -> .)
    $end            reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    GOTO            reduce using rule 1 (empty -> .)
    USE             reduce using rule 1 (empty -> .)
    <               reduce using rule 1 (empty -> .)
    POINTER_OP      reduce using rule 1 (empty -> .)
    ADDRESS_OP      reduce using rule 1 (empty -> .)
    NUM             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    }               reduce using rule 1 (empty -> .)
    VAR             shift and go to state 5

    empty                          shift and go to state 3
    variable_declaration           shift and go to state 1
    variable_declaration_list      shift and go to state 7

state 2

    (14) variable_declarations -> variable_declaration_list .

    IF              reduce using rule 14 (variable_declarations -> variable_declaration_list .)
    GOTO            reduce using rule 14 (variable_declarations -> variable_declaration_list .)
    USE             reduce using rule 14 (variable_declarations -> variable_declaration_list .)
    <               reduce using rule 14 (variable_declarations -> variable_declaration_list .)
    NAME            reduce using rule 14 (variable_declarations -> variable_declaration_list .)
    POINTER_OP      reduce using rule 14 (variable_declarations -> variable_declaration_list .)
    ADDRESS_OP      reduce using rule 14 (variable_declarations -> variable_declaration_list .)
    NUM             reduce using rule 14 (variable_declarations -> variable_declaration_list .)
    RETURN          reduce using rule 14 (variable_declarations -> variable_declaration_list .)
    }               reduce using rule 14 (variable_declarations -> variable_declaration_list .)
    $end            reduce using rule 14 (variable_declarations -> variable_declaration_list .)


state 3

    (15) variable_declaration_list -> empty .

    NAME            reduce using rule 15 (variable_declaration_list -> empty .)
    $end            reduce using rule 15 (variable_declaration_list -> empty .)
    IF              reduce using rule 15 (variable_declaration_list -> empty .)
    GOTO            reduce using rule 15 (variable_declaration_list -> empty .)
    USE             reduce using rule 15 (variable_declaration_list -> empty .)
    <               reduce using rule 15 (variable_declaration_list -> empty .)
    POINTER_OP      reduce using rule 15 (variable_declaration_list -> empty .)
    ADDRESS_OP      reduce using rule 15 (variable_declaration_list -> empty .)
    NUM             reduce using rule 15 (variable_declaration_list -> empty .)
    RETURN          reduce using rule 15 (variable_declaration_list -> empty .)
    }               reduce using rule 15 (variable_declaration_list -> empty .)


state 4

    (0) S' -> program .



state 5

    (17) variable_declaration -> VAR . var_list ;
    (18) var_list -> . ppointer_var
    (19) var_list -> . var_list , ppointer_var
    (20) var_list -> . variable
    (21) var_list -> . var_list , variable
    (23) ppointer_var -> . POINTER_OP ppointer_var
    (24) ppointer_var -> . pointer_variable
    (47) variable -> . NAME
    (48) variable -> . arr_var
    (22) pointer_variable -> . POINTER_OP variable
    (49) arr_var -> . NAME [ NUM ]

    POINTER_OP      shift and go to state 12
    NAME            shift and go to state 13

    var_list                       shift and go to state 8
    variable                       shift and go to state 14
    ppointer_var                   shift and go to state 9
    arr_var                        shift and go to state 10
    pointer_variable               shift and go to state 11

state 6

    (2) program -> variable_declarations . procedure_definition_list
    (3) procedure_definition_list -> . procedure_definition procedure_definition_list
    (4) procedure_definition_list -> . empty
    (5) procedure_definition -> . NAME ( def_parameters ) { variable_declarations ex_statement_list return_stat }
    (1) empty -> .

    NAME            shift and go to state 18
    $end            reduce using rule 1 (empty -> .)

    procedure_definition_list      shift and go to state 15
    empty                          shift and go to state 16
    procedure_definition           shift and go to state 17

state 7

    (16) variable_declaration_list -> variable_declaration variable_declaration_list .

    NAME            reduce using rule 16 (variable_declaration_list -> variable_declaration variable_declaration_list .)
    $end            reduce using rule 16 (variable_declaration_list -> variable_declaration variable_declaration_list .)
    IF              reduce using rule 16 (variable_declaration_list -> variable_declaration variable_declaration_list .)
    GOTO            reduce using rule 16 (variable_declaration_list -> variable_declaration variable_declaration_list .)
    USE             reduce using rule 16 (variable_declaration_list -> variable_declaration variable_declaration_list .)
    <               reduce using rule 16 (variable_declaration_list -> variable_declaration variable_declaration_list .)
    POINTER_OP      reduce using rule 16 (variable_declaration_list -> variable_declaration variable_declaration_list .)
    ADDRESS_OP      reduce using rule 16 (variable_declaration_list -> variable_declaration variable_declaration_list .)
    NUM             reduce using rule 16 (variable_declaration_list -> variable_declaration variable_declaration_list .)
    RETURN          reduce using rule 16 (variable_declaration_list -> variable_declaration variable_declaration_list .)
    }               reduce using rule 16 (variable_declaration_list -> variable_declaration variable_declaration_list .)


state 8

    (17) variable_declaration -> VAR var_list . ;
    (19) var_list -> var_list . , ppointer_var
    (21) var_list -> var_list . , variable

    ;               shift and go to state 20
    ,               shift and go to state 19


state 9

    (18) var_list -> ppointer_var .

    ;               reduce using rule 18 (var_list -> ppointer_var .)
    ,               reduce using rule 18 (var_list -> ppointer_var .)


state 10

    (48) variable -> arr_var .

    ASSIGN_OP       reduce using rule 48 (variable -> arr_var .)
    ;               reduce using rule 48 (variable -> arr_var .)
    ,               reduce using rule 48 (variable -> arr_var .)
    )               reduce using rule 48 (variable -> arr_var .)
    +               reduce using rule 48 (variable -> arr_var .)
    -               reduce using rule 48 (variable -> arr_var .)


state 11

    (24) ppointer_var -> pointer_variable .

    ASSIGN_OP       reduce using rule 24 (ppointer_var -> pointer_variable .)
    ;               reduce using rule 24 (ppointer_var -> pointer_variable .)
    ,               reduce using rule 24 (ppointer_var -> pointer_variable .)
    )               reduce using rule 24 (ppointer_var -> pointer_variable .)
    +               reduce using rule 24 (ppointer_var -> pointer_variable .)
    -               reduce using rule 24 (ppointer_var -> pointer_variable .)


state 12

    (23) ppointer_var -> POINTER_OP . ppointer_var
    (22) pointer_variable -> POINTER_OP . variable
    (23) ppointer_var -> . POINTER_OP ppointer_var
    (24) ppointer_var -> . pointer_variable
    (47) variable -> . NAME
    (48) variable -> . arr_var
    (22) pointer_variable -> . POINTER_OP variable
    (49) arr_var -> . NAME [ NUM ]

    POINTER_OP      shift and go to state 12
    NAME            shift and go to state 13

    variable                       shift and go to state 22
    ppointer_var                   shift and go to state 21
    arr_var                        shift and go to state 10
    pointer_variable               shift and go to state 11

state 13

    (47) variable -> NAME .
    (49) arr_var -> NAME . [ NUM ]

    ;               reduce using rule 47 (variable -> NAME .)
    ,               reduce using rule 47 (variable -> NAME .)
    )               reduce using rule 47 (variable -> NAME .)
    ASSIGN_OP       reduce using rule 47 (variable -> NAME .)
    +               reduce using rule 47 (variable -> NAME .)
    -               reduce using rule 47 (variable -> NAME .)
    [               shift and go to state 23


state 14

    (20) var_list -> variable .

    ;               reduce using rule 20 (var_list -> variable .)
    ,               reduce using rule 20 (var_list -> variable .)


state 15

    (2) program -> variable_declarations procedure_definition_list .

    $end            reduce using rule 2 (program -> variable_declarations procedure_definition_list .)


state 16

    (4) procedure_definition_list -> empty .

    $end            reduce using rule 4 (procedure_definition_list -> empty .)


state 17

    (3) procedure_definition_list -> procedure_definition . procedure_definition_list
    (3) procedure_definition_list -> . procedure_definition procedure_definition_list
    (4) procedure_definition_list -> . empty
    (5) procedure_definition -> . NAME ( def_parameters ) { variable_declarations ex_statement_list return_stat }
    (1) empty -> .

    NAME            shift and go to state 18
    $end            reduce using rule 1 (empty -> .)

    procedure_definition_list      shift and go to state 24
    empty                          shift and go to state 16
    procedure_definition           shift and go to state 17

state 18

    (5) procedure_definition -> NAME . ( def_parameters ) { variable_declarations ex_statement_list return_stat }

    (               shift and go to state 25


state 19

    (19) var_list -> var_list , . ppointer_var
    (21) var_list -> var_list , . variable
    (23) ppointer_var -> . POINTER_OP ppointer_var
    (24) ppointer_var -> . pointer_variable
    (47) variable -> . NAME
    (48) variable -> . arr_var
    (22) pointer_variable -> . POINTER_OP variable
    (49) arr_var -> . NAME [ NUM ]

    POINTER_OP      shift and go to state 12
    NAME            shift and go to state 13

    variable                       shift and go to state 27
    ppointer_var                   shift and go to state 26
    arr_var                        shift and go to state 10
    pointer_variable               shift and go to state 11

state 20

    (17) variable_declaration -> VAR var_list ; .

    VAR             reduce using rule 17 (variable_declaration -> VAR var_list ; .)
    NAME            reduce using rule 17 (variable_declaration -> VAR var_list ; .)
    $end            reduce using rule 17 (variable_declaration -> VAR var_list ; .)
    IF              reduce using rule 17 (variable_declaration -> VAR var_list ; .)
    GOTO            reduce using rule 17 (variable_declaration -> VAR var_list ; .)
    USE             reduce using rule 17 (variable_declaration -> VAR var_list ; .)
    <               reduce using rule 17 (variable_declaration -> VAR var_list ; .)
    POINTER_OP      reduce using rule 17 (variable_declaration -> VAR var_list ; .)
    ADDRESS_OP      reduce using rule 17 (variable_declaration -> VAR var_list ; .)
    NUM             reduce using rule 17 (variable_declaration -> VAR var_list ; .)
    RETURN          reduce using rule 17 (variable_declaration -> VAR var_list ; .)
    }               reduce using rule 17 (variable_declaration -> VAR var_list ; .)


state 21

    (23) ppointer_var -> POINTER_OP ppointer_var .

    ASSIGN_OP       reduce using rule 23 (ppointer_var -> POINTER_OP ppointer_var .)
    ;               reduce using rule 23 (ppointer_var -> POINTER_OP ppointer_var .)
    ,               reduce using rule 23 (ppointer_var -> POINTER_OP ppointer_var .)
    )               reduce using rule 23 (ppointer_var -> POINTER_OP ppointer_var .)
    +               reduce using rule 23 (ppointer_var -> POINTER_OP ppointer_var .)
    -               reduce using rule 23 (ppointer_var -> POINTER_OP ppointer_var .)


state 22

    (22) pointer_variable -> POINTER_OP variable .

    ASSIGN_OP       reduce using rule 22 (pointer_variable -> POINTER_OP variable .)
    +               reduce using rule 22 (pointer_variable -> POINTER_OP variable .)
    -               reduce using rule 22 (pointer_variable -> POINTER_OP variable .)
    ;               reduce using rule 22 (pointer_variable -> POINTER_OP variable .)
    ,               reduce using rule 22 (pointer_variable -> POINTER_OP variable .)
    )               reduce using rule 22 (pointer_variable -> POINTER_OP variable .)


state 23

    (49) arr_var -> NAME [ . NUM ]

    NUM             shift and go to state 28


state 24

    (3) procedure_definition_list -> procedure_definition procedure_definition_list .

    $end            reduce using rule 3 (procedure_definition_list -> procedure_definition procedure_definition_list .)


state 25

    (5) procedure_definition -> NAME ( . def_parameters ) { variable_declarations ex_statement_list return_stat }
    (6) def_parameters -> . VAR ppointer_var def_parameter_list
    (7) def_parameters -> . empty
    (1) empty -> .

    VAR             shift and go to state 31
    )               reduce using rule 1 (empty -> .)

    def_parameters                 shift and go to state 29
    empty                          shift and go to state 30

state 26

    (19) var_list -> var_list , ppointer_var .

    ;               reduce using rule 19 (var_list -> var_list , ppointer_var .)
    ,               reduce using rule 19 (var_list -> var_list , ppointer_var .)


state 27

    (21) var_list -> var_list , variable .

    ;               reduce using rule 21 (var_list -> var_list , variable .)
    ,               reduce using rule 21 (var_list -> var_list , variable .)


state 28

    (49) arr_var -> NAME [ NUM . ]

    ]               shift and go to state 32


state 29

    (5) procedure_definition -> NAME ( def_parameters . ) { variable_declarations ex_statement_list return_stat }

    )               shift and go to state 33


state 30

    (7) def_parameters -> empty .

    )               reduce using rule 7 (def_parameters -> empty .)


state 31

    (6) def_parameters -> VAR . ppointer_var def_parameter_list
    (23) ppointer_var -> . POINTER_OP ppointer_var
    (24) ppointer_var -> . pointer_variable
    (22) pointer_variable -> . POINTER_OP variable

    POINTER_OP      shift and go to state 12

    pointer_variable               shift and go to state 11
    ppointer_var                   shift and go to state 34

state 32

    (49) arr_var -> NAME [ NUM ] .

    ;               reduce using rule 49 (arr_var -> NAME [ NUM ] .)
    +               reduce using rule 49 (arr_var -> NAME [ NUM ] .)
    -               reduce using rule 49 (arr_var -> NAME [ NUM ] .)
    ASSIGN_OP       reduce using rule 49 (arr_var -> NAME [ NUM ] .)
    ,               reduce using rule 49 (arr_var -> NAME [ NUM ] .)
    )               reduce using rule 49 (arr_var -> NAME [ NUM ] .)


state 33

    (5) procedure_definition -> NAME ( def_parameters ) . { variable_declarations ex_statement_list return_stat }

    {               shift and go to state 35


state 34

    (6) def_parameters -> VAR ppointer_var . def_parameter_list
    (8) def_parameter_list -> . , def_parameters
    (9) def_parameter_list -> . empty
    (1) empty -> .

    ,               shift and go to state 36
    )               reduce using rule 1 (empty -> .)

    empty                          shift and go to state 37
    def_parameter_list             shift and go to state 38

state 35

    (5) procedure_definition -> NAME ( def_parameters ) { . variable_declarations ex_statement_list return_stat }
    (14) variable_declarations -> . variable_declaration_list
    (15) variable_declaration_list -> . empty
    (16) variable_declaration_list -> . variable_declaration variable_declaration_list
    (1) empty -> .
    (17) variable_declaration -> . VAR var_list ;

    IF              reduce using rule 1 (empty -> .)
    GOTO            reduce using rule 1 (empty -> .)
    USE             reduce using rule 1 (empty -> .)
    <               reduce using rule 1 (empty -> .)
    NAME            reduce using rule 1 (empty -> .)
    POINTER_OP      reduce using rule 1 (empty -> .)
    ADDRESS_OP      reduce using rule 1 (empty -> .)
    NUM             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    }               reduce using rule 1 (empty -> .)
    VAR             shift and go to state 5

    variable_declaration_list      shift and go to state 2
    empty                          shift and go to state 3
    variable_declaration           shift and go to state 1
    variable_declarations          shift and go to state 39

state 36

    (8) def_parameter_list -> , . def_parameters
    (6) def_parameters -> . VAR ppointer_var def_parameter_list
    (7) def_parameters -> . empty
    (1) empty -> .

    VAR             shift and go to state 31
    )               reduce using rule 1 (empty -> .)

    def_parameters                 shift and go to state 40
    empty                          shift and go to state 30

state 37

    (9) def_parameter_list -> empty .

    )               reduce using rule 9 (def_parameter_list -> empty .)


state 38

    (6) def_parameters -> VAR ppointer_var def_parameter_list .

    )               reduce using rule 6 (def_parameters -> VAR ppointer_var def_parameter_list .)


state 39

    (5) procedure_definition -> NAME ( def_parameters ) { variable_declarations . ex_statement_list return_stat }
    (26) ex_statement_list -> . empty
    (27) ex_statement_list -> . statement ex_statement_list
    (1) empty -> .
    (28) statement -> . assignment_statement
    (29) statement -> . cond_goto
    (30) statement -> . uncond_goto
    (31) statement -> . use_stat
    (32) statement -> . label
    (33) statement -> . procedure_call
    (34) assignment_statement -> . expression_term ASSIGN_OP arith_expression ;
    (43) cond_goto -> . IF ( ) if_cond_goto
    (44) uncond_goto -> . GOTO label
    (55) use_stat -> . USE ( ppointer_var ) ;
    (56) label -> . < BB NUM > :
    (46) procedure_call -> . NAME ( call_parameters ) ;
    (38) expression_term -> . variable
    (39) expression_term -> . ppointer_var
    (40) expression_term -> . addr_var
    (41) expression_term -> . constant
    (42) expression_term -> . procedure_call
    (47) variable -> . NAME
    (48) variable -> . arr_var
    (23) ppointer_var -> . POINTER_OP ppointer_var
    (24) ppointer_var -> . pointer_variable
    (25) addr_var -> . ADDRESS_OP variable
    (50) constant -> . NUM
    (49) arr_var -> . NAME [ NUM ]
    (22) pointer_variable -> . POINTER_OP variable

    RETURN          reduce using rule 1 (empty -> .)
    }               reduce using rule 1 (empty -> .)
    IF              shift and go to state 50
    GOTO            shift and go to state 55
    USE             shift and go to state 59
    <               shift and go to state 58
    NAME            shift and go to state 61
    POINTER_OP      shift and go to state 12
    ADDRESS_OP      shift and go to state 42
    NUM             shift and go to state 57

    statement                      shift and go to state 41
    empty                          shift and go to state 43
    constant                       shift and go to state 44
    assignment_statement           shift and go to state 48
    procedure_call                 shift and go to state 46
    use_stat                       shift and go to state 60
    variable                       shift and go to state 49
    arr_var                        shift and go to state 10
    label                          shift and go to state 51
    ppointer_var                   shift and go to state 52
    uncond_goto                    shift and go to state 53
    ex_statement_list              shift and go to state 56
    pointer_variable               shift and go to state 11
    expression_term                shift and go to state 54
    addr_var                       shift and go to state 45
    cond_goto                      shift and go to state 47

state 40

    (8) def_parameter_list -> , def_parameters .

    )               reduce using rule 8 (def_parameter_list -> , def_parameters .)


state 41

    (27) ex_statement_list -> statement . ex_statement_list
    (26) ex_statement_list -> . empty
    (27) ex_statement_list -> . statement ex_statement_list
    (1) empty -> .
    (28) statement -> . assignment_statement
    (29) statement -> . cond_goto
    (30) statement -> . uncond_goto
    (31) statement -> . use_stat
    (32) statement -> . label
    (33) statement -> . procedure_call
    (34) assignment_statement -> . expression_term ASSIGN_OP arith_expression ;
    (43) cond_goto -> . IF ( ) if_cond_goto
    (44) uncond_goto -> . GOTO label
    (55) use_stat -> . USE ( ppointer_var ) ;
    (56) label -> . < BB NUM > :
    (46) procedure_call -> . NAME ( call_parameters ) ;
    (38) expression_term -> . variable
    (39) expression_term -> . ppointer_var
    (40) expression_term -> . addr_var
    (41) expression_term -> . constant
    (42) expression_term -> . procedure_call
    (47) variable -> . NAME
    (48) variable -> . arr_var
    (23) ppointer_var -> . POINTER_OP ppointer_var
    (24) ppointer_var -> . pointer_variable
    (25) addr_var -> . ADDRESS_OP variable
    (50) constant -> . NUM
    (49) arr_var -> . NAME [ NUM ]
    (22) pointer_variable -> . POINTER_OP variable

    RETURN          reduce using rule 1 (empty -> .)
    }               reduce using rule 1 (empty -> .)
    IF              shift and go to state 50
    GOTO            shift and go to state 55
    USE             shift and go to state 59
    <               shift and go to state 58
    NAME            shift and go to state 61
    POINTER_OP      shift and go to state 12
    ADDRESS_OP      shift and go to state 42
    NUM             shift and go to state 57

    statement                      shift and go to state 41
    pointer_variable               shift and go to state 11
    ppointer_var                   shift and go to state 52
    uncond_goto                    shift and go to state 53
    label                          shift and go to state 51
    empty                          shift and go to state 43
    constant                       shift and go to state 44
    expression_term                shift and go to state 54
    assignment_statement           shift and go to state 48
    addr_var                       shift and go to state 45
    ex_statement_list              shift and go to state 62
    procedure_call                 shift and go to state 46
    cond_goto                      shift and go to state 47
    arr_var                        shift and go to state 10
    use_stat                       shift and go to state 60
    variable                       shift and go to state 49

state 42

    (25) addr_var -> ADDRESS_OP . variable
    (47) variable -> . NAME
    (48) variable -> . arr_var
    (49) arr_var -> . NAME [ NUM ]

    NAME            shift and go to state 13

    variable                       shift and go to state 63
    arr_var                        shift and go to state 10

state 43

    (26) ex_statement_list -> empty .

    RETURN          reduce using rule 26 (ex_statement_list -> empty .)
    }               reduce using rule 26 (ex_statement_list -> empty .)


state 44

    (41) expression_term -> constant .

    +               reduce using rule 41 (expression_term -> constant .)
    -               reduce using rule 41 (expression_term -> constant .)
    ;               reduce using rule 41 (expression_term -> constant .)
    ASSIGN_OP       reduce using rule 41 (expression_term -> constant .)


state 45

    (40) expression_term -> addr_var .

    +               reduce using rule 40 (expression_term -> addr_var .)
    -               reduce using rule 40 (expression_term -> addr_var .)
    ;               reduce using rule 40 (expression_term -> addr_var .)
    ASSIGN_OP       reduce using rule 40 (expression_term -> addr_var .)


state 46

    (33) statement -> procedure_call .
    (42) expression_term -> procedure_call .

    IF              reduce using rule 33 (statement -> procedure_call .)
    GOTO            reduce using rule 33 (statement -> procedure_call .)
    USE             reduce using rule 33 (statement -> procedure_call .)
    <               reduce using rule 33 (statement -> procedure_call .)
    NAME            reduce using rule 33 (statement -> procedure_call .)
    POINTER_OP      reduce using rule 33 (statement -> procedure_call .)
    ADDRESS_OP      reduce using rule 33 (statement -> procedure_call .)
    NUM             reduce using rule 33 (statement -> procedure_call .)
    RETURN          reduce using rule 33 (statement -> procedure_call .)
    }               reduce using rule 33 (statement -> procedure_call .)
    ASSIGN_OP       reduce using rule 42 (expression_term -> procedure_call .)


state 47

    (29) statement -> cond_goto .

    IF              reduce using rule 29 (statement -> cond_goto .)
    GOTO            reduce using rule 29 (statement -> cond_goto .)
    USE             reduce using rule 29 (statement -> cond_goto .)
    <               reduce using rule 29 (statement -> cond_goto .)
    NAME            reduce using rule 29 (statement -> cond_goto .)
    POINTER_OP      reduce using rule 29 (statement -> cond_goto .)
    ADDRESS_OP      reduce using rule 29 (statement -> cond_goto .)
    NUM             reduce using rule 29 (statement -> cond_goto .)
    RETURN          reduce using rule 29 (statement -> cond_goto .)
    }               reduce using rule 29 (statement -> cond_goto .)


state 48

    (28) statement -> assignment_statement .

    IF              reduce using rule 28 (statement -> assignment_statement .)
    GOTO            reduce using rule 28 (statement -> assignment_statement .)
    USE             reduce using rule 28 (statement -> assignment_statement .)
    <               reduce using rule 28 (statement -> assignment_statement .)
    NAME            reduce using rule 28 (statement -> assignment_statement .)
    POINTER_OP      reduce using rule 28 (statement -> assignment_statement .)
    ADDRESS_OP      reduce using rule 28 (statement -> assignment_statement .)
    NUM             reduce using rule 28 (statement -> assignment_statement .)
    RETURN          reduce using rule 28 (statement -> assignment_statement .)
    }               reduce using rule 28 (statement -> assignment_statement .)


state 49

    (38) expression_term -> variable .

    +               reduce using rule 38 (expression_term -> variable .)
    -               reduce using rule 38 (expression_term -> variable .)
    ;               reduce using rule 38 (expression_term -> variable .)
    ASSIGN_OP       reduce using rule 38 (expression_term -> variable .)


state 50

    (43) cond_goto -> IF . ( ) if_cond_goto

    (               shift and go to state 64


state 51

    (32) statement -> label .

    IF              reduce using rule 32 (statement -> label .)
    GOTO            reduce using rule 32 (statement -> label .)
    USE             reduce using rule 32 (statement -> label .)
    <               reduce using rule 32 (statement -> label .)
    NAME            reduce using rule 32 (statement -> label .)
    POINTER_OP      reduce using rule 32 (statement -> label .)
    ADDRESS_OP      reduce using rule 32 (statement -> label .)
    NUM             reduce using rule 32 (statement -> label .)
    RETURN          reduce using rule 32 (statement -> label .)
    }               reduce using rule 32 (statement -> label .)


state 52

    (39) expression_term -> ppointer_var .

    +               reduce using rule 39 (expression_term -> ppointer_var .)
    -               reduce using rule 39 (expression_term -> ppointer_var .)
    ;               reduce using rule 39 (expression_term -> ppointer_var .)
    ASSIGN_OP       reduce using rule 39 (expression_term -> ppointer_var .)


state 53

    (30) statement -> uncond_goto .

    IF              reduce using rule 30 (statement -> uncond_goto .)
    GOTO            reduce using rule 30 (statement -> uncond_goto .)
    USE             reduce using rule 30 (statement -> uncond_goto .)
    <               reduce using rule 30 (statement -> uncond_goto .)
    NAME            reduce using rule 30 (statement -> uncond_goto .)
    POINTER_OP      reduce using rule 30 (statement -> uncond_goto .)
    ADDRESS_OP      reduce using rule 30 (statement -> uncond_goto .)
    NUM             reduce using rule 30 (statement -> uncond_goto .)
    RETURN          reduce using rule 30 (statement -> uncond_goto .)
    }               reduce using rule 30 (statement -> uncond_goto .)


state 54

    (34) assignment_statement -> expression_term . ASSIGN_OP arith_expression ;

    ASSIGN_OP       shift and go to state 65


state 55

    (44) uncond_goto -> GOTO . label
    (56) label -> . < BB NUM > :

    <               shift and go to state 58

    label                          shift and go to state 66

state 56

    (5) procedure_definition -> NAME ( def_parameters ) { variable_declarations ex_statement_list . return_stat }
    (51) return_stat -> . RETURN ppointer_var ;
    (52) return_stat -> . RETURN addr_var ;
    (53) return_stat -> . RETURN variable ;
    (54) return_stat -> . empty
    (1) empty -> .

    RETURN          shift and go to state 68
    }               reduce using rule 1 (empty -> .)

    empty                          shift and go to state 69
    return_stat                    shift and go to state 67

state 57

    (50) constant -> NUM .

    ASSIGN_OP       reduce using rule 50 (constant -> NUM .)
    +               reduce using rule 50 (constant -> NUM .)
    -               reduce using rule 50 (constant -> NUM .)
    ;               reduce using rule 50 (constant -> NUM .)


state 58

    (56) label -> < . BB NUM > :

    BB              shift and go to state 70


state 59

    (55) use_stat -> USE . ( ppointer_var ) ;

    (               shift and go to state 71


state 60

    (31) statement -> use_stat .

    IF              reduce using rule 31 (statement -> use_stat .)
    GOTO            reduce using rule 31 (statement -> use_stat .)
    USE             reduce using rule 31 (statement -> use_stat .)
    <               reduce using rule 31 (statement -> use_stat .)
    NAME            reduce using rule 31 (statement -> use_stat .)
    POINTER_OP      reduce using rule 31 (statement -> use_stat .)
    ADDRESS_OP      reduce using rule 31 (statement -> use_stat .)
    NUM             reduce using rule 31 (statement -> use_stat .)
    RETURN          reduce using rule 31 (statement -> use_stat .)
    }               reduce using rule 31 (statement -> use_stat .)


state 61

    (46) procedure_call -> NAME . ( call_parameters ) ;
    (47) variable -> NAME .
    (49) arr_var -> NAME . [ NUM ]

    (               shift and go to state 72
    ASSIGN_OP       reduce using rule 47 (variable -> NAME .)
    [               shift and go to state 23


state 62

    (27) ex_statement_list -> statement ex_statement_list .

    RETURN          reduce using rule 27 (ex_statement_list -> statement ex_statement_list .)
    }               reduce using rule 27 (ex_statement_list -> statement ex_statement_list .)


state 63

    (25) addr_var -> ADDRESS_OP variable .

    ;               reduce using rule 25 (addr_var -> ADDRESS_OP variable .)
    +               reduce using rule 25 (addr_var -> ADDRESS_OP variable .)
    -               reduce using rule 25 (addr_var -> ADDRESS_OP variable .)
    ASSIGN_OP       reduce using rule 25 (addr_var -> ADDRESS_OP variable .)


state 64

    (43) cond_goto -> IF ( . ) if_cond_goto

    )               shift and go to state 73


state 65

    (34) assignment_statement -> expression_term ASSIGN_OP . arith_expression ;
    (35) arith_expression -> . arith_expression + arith_expression
    (36) arith_expression -> . arith_expression - arith_expression
    (37) arith_expression -> . expression_term
    (38) expression_term -> . variable
    (39) expression_term -> . ppointer_var
    (40) expression_term -> . addr_var
    (41) expression_term -> . constant
    (42) expression_term -> . procedure_call
    (47) variable -> . NAME
    (48) variable -> . arr_var
    (23) ppointer_var -> . POINTER_OP ppointer_var
    (24) ppointer_var -> . pointer_variable
    (25) addr_var -> . ADDRESS_OP variable
    (50) constant -> . NUM
    (46) procedure_call -> . NAME ( call_parameters ) ;
    (49) arr_var -> . NAME [ NUM ]
    (22) pointer_variable -> . POINTER_OP variable

    NAME            shift and go to state 76
    POINTER_OP      shift and go to state 12
    ADDRESS_OP      shift and go to state 42
    NUM             shift and go to state 57

    addr_var                       shift and go to state 45
    arith_expression               shift and go to state 74
    procedure_call                 shift and go to state 77
    arr_var                        shift and go to state 10
    variable                       shift and go to state 49
    constant                       shift and go to state 44
    expression_term                shift and go to state 75
    pointer_variable               shift and go to state 11
    ppointer_var                   shift and go to state 52

state 66

    (44) uncond_goto -> GOTO label .

    IF              reduce using rule 44 (uncond_goto -> GOTO label .)
    GOTO            reduce using rule 44 (uncond_goto -> GOTO label .)
    USE             reduce using rule 44 (uncond_goto -> GOTO label .)
    <               reduce using rule 44 (uncond_goto -> GOTO label .)
    NAME            reduce using rule 44 (uncond_goto -> GOTO label .)
    POINTER_OP      reduce using rule 44 (uncond_goto -> GOTO label .)
    ADDRESS_OP      reduce using rule 44 (uncond_goto -> GOTO label .)
    NUM             reduce using rule 44 (uncond_goto -> GOTO label .)
    RETURN          reduce using rule 44 (uncond_goto -> GOTO label .)
    }               reduce using rule 44 (uncond_goto -> GOTO label .)


state 67

    (5) procedure_definition -> NAME ( def_parameters ) { variable_declarations ex_statement_list return_stat . }

    }               shift and go to state 78


state 68

    (51) return_stat -> RETURN . ppointer_var ;
    (52) return_stat -> RETURN . addr_var ;
    (53) return_stat -> RETURN . variable ;
    (23) ppointer_var -> . POINTER_OP ppointer_var
    (24) ppointer_var -> . pointer_variable
    (25) addr_var -> . ADDRESS_OP variable
    (47) variable -> . NAME
    (48) variable -> . arr_var
    (22) pointer_variable -> . POINTER_OP variable
    (49) arr_var -> . NAME [ NUM ]

    POINTER_OP      shift and go to state 12
    ADDRESS_OP      shift and go to state 42
    NAME            shift and go to state 13

    variable                       shift and go to state 80
    addr_var                       shift and go to state 79
    ppointer_var                   shift and go to state 81
    arr_var                        shift and go to state 10
    pointer_variable               shift and go to state 11

state 69

    (54) return_stat -> empty .

    }               reduce using rule 54 (return_stat -> empty .)


state 70

    (56) label -> < BB . NUM > :

    NUM             shift and go to state 82


state 71

    (55) use_stat -> USE ( . ppointer_var ) ;
    (23) ppointer_var -> . POINTER_OP ppointer_var
    (24) ppointer_var -> . pointer_variable
    (22) pointer_variable -> . POINTER_OP variable

    POINTER_OP      shift and go to state 12

    ppointer_var                   shift and go to state 83
    pointer_variable               shift and go to state 11

state 72

    (46) procedure_call -> NAME ( . call_parameters ) ;
    (10) call_parameters -> . ppointer_var call_parameter_list
    (11) call_parameters -> . empty
    (23) ppointer_var -> . POINTER_OP ppointer_var
    (24) ppointer_var -> . pointer_variable
    (1) empty -> .
    (22) pointer_variable -> . POINTER_OP variable

    POINTER_OP      shift and go to state 12
    )               reduce using rule 1 (empty -> .)

    call_parameters                shift and go to state 85
    empty                          shift and go to state 86
    pointer_variable               shift and go to state 11
    ppointer_var                   shift and go to state 84

state 73

    (43) cond_goto -> IF ( ) . if_cond_goto
    (45) if_cond_goto -> . GOTO label

    GOTO            shift and go to state 88

    if_cond_goto                   shift and go to state 87

state 74

    (34) assignment_statement -> expression_term ASSIGN_OP arith_expression . ;
    (35) arith_expression -> arith_expression . + arith_expression
    (36) arith_expression -> arith_expression . - arith_expression

    ;               shift and go to state 89
    +               shift and go to state 90
    -               shift and go to state 91


state 75

    (37) arith_expression -> expression_term .

    +               reduce using rule 37 (arith_expression -> expression_term .)
    -               reduce using rule 37 (arith_expression -> expression_term .)
    ;               reduce using rule 37 (arith_expression -> expression_term .)


state 76

    (47) variable -> NAME .
    (46) procedure_call -> NAME . ( call_parameters ) ;
    (49) arr_var -> NAME . [ NUM ]

    +               reduce using rule 47 (variable -> NAME .)
    -               reduce using rule 47 (variable -> NAME .)
    ;               reduce using rule 47 (variable -> NAME .)
    (               shift and go to state 72
    [               shift and go to state 23


state 77

    (42) expression_term -> procedure_call .

    +               reduce using rule 42 (expression_term -> procedure_call .)
    -               reduce using rule 42 (expression_term -> procedure_call .)
    ;               reduce using rule 42 (expression_term -> procedure_call .)


state 78

    (5) procedure_definition -> NAME ( def_parameters ) { variable_declarations ex_statement_list return_stat } .

    NAME            reduce using rule 5 (procedure_definition -> NAME ( def_parameters ) { variable_declarations ex_statement_list return_stat } .)
    $end            reduce using rule 5 (procedure_definition -> NAME ( def_parameters ) { variable_declarations ex_statement_list return_stat } .)


state 79

    (52) return_stat -> RETURN addr_var . ;

    ;               shift and go to state 92


state 80

    (53) return_stat -> RETURN variable . ;

    ;               shift and go to state 93


state 81

    (51) return_stat -> RETURN ppointer_var . ;

    ;               shift and go to state 94


state 82

    (56) label -> < BB NUM . > :

    >               shift and go to state 95


state 83

    (55) use_stat -> USE ( ppointer_var . ) ;

    )               shift and go to state 96


state 84

    (10) call_parameters -> ppointer_var . call_parameter_list
    (12) call_parameter_list -> . , call_parameters
    (13) call_parameter_list -> . empty
    (1) empty -> .

    ,               shift and go to state 98
    )               reduce using rule 1 (empty -> .)

    empty                          shift and go to state 97
    call_parameter_list            shift and go to state 99

state 85

    (46) procedure_call -> NAME ( call_parameters . ) ;

    )               shift and go to state 100


state 86

    (11) call_parameters -> empty .

    )               reduce using rule 11 (call_parameters -> empty .)


state 87

    (43) cond_goto -> IF ( ) if_cond_goto .

    IF              reduce using rule 43 (cond_goto -> IF ( ) if_cond_goto .)
    GOTO            reduce using rule 43 (cond_goto -> IF ( ) if_cond_goto .)
    USE             reduce using rule 43 (cond_goto -> IF ( ) if_cond_goto .)
    <               reduce using rule 43 (cond_goto -> IF ( ) if_cond_goto .)
    NAME            reduce using rule 43 (cond_goto -> IF ( ) if_cond_goto .)
    POINTER_OP      reduce using rule 43 (cond_goto -> IF ( ) if_cond_goto .)
    ADDRESS_OP      reduce using rule 43 (cond_goto -> IF ( ) if_cond_goto .)
    NUM             reduce using rule 43 (cond_goto -> IF ( ) if_cond_goto .)
    RETURN          reduce using rule 43 (cond_goto -> IF ( ) if_cond_goto .)
    }               reduce using rule 43 (cond_goto -> IF ( ) if_cond_goto .)


state 88

    (45) if_cond_goto -> GOTO . label
    (56) label -> . < BB NUM > :

    <               shift and go to state 58

    label                          shift and go to state 101

state 89

    (34) assignment_statement -> expression_term ASSIGN_OP arith_expression ; .

    IF              reduce using rule 34 (assignment_statement -> expression_term ASSIGN_OP arith_expression ; .)
    GOTO            reduce using rule 34 (assignment_statement -> expression_term ASSIGN_OP arith_expression ; .)
    USE             reduce using rule 34 (assignment_statement -> expression_term ASSIGN_OP arith_expression ; .)
    <               reduce using rule 34 (assignment_statement -> expression_term ASSIGN_OP arith_expression ; .)
    NAME            reduce using rule 34 (assignment_statement -> expression_term ASSIGN_OP arith_expression ; .)
    POINTER_OP      reduce using rule 34 (assignment_statement -> expression_term ASSIGN_OP arith_expression ; .)
    ADDRESS_OP      reduce using rule 34 (assignment_statement -> expression_term ASSIGN_OP arith_expression ; .)
    NUM             reduce using rule 34 (assignment_statement -> expression_term ASSIGN_OP arith_expression ; .)
    RETURN          reduce using rule 34 (assignment_statement -> expression_term ASSIGN_OP arith_expression ; .)
    }               reduce using rule 34 (assignment_statement -> expression_term ASSIGN_OP arith_expression ; .)


state 90

    (35) arith_expression -> arith_expression + . arith_expression
    (35) arith_expression -> . arith_expression + arith_expression
    (36) arith_expression -> . arith_expression - arith_expression
    (37) arith_expression -> . expression_term
    (38) expression_term -> . variable
    (39) expression_term -> . ppointer_var
    (40) expression_term -> . addr_var
    (41) expression_term -> . constant
    (42) expression_term -> . procedure_call
    (47) variable -> . NAME
    (48) variable -> . arr_var
    (23) ppointer_var -> . POINTER_OP ppointer_var
    (24) ppointer_var -> . pointer_variable
    (25) addr_var -> . ADDRESS_OP variable
    (50) constant -> . NUM
    (46) procedure_call -> . NAME ( call_parameters ) ;
    (49) arr_var -> . NAME [ NUM ]
    (22) pointer_variable -> . POINTER_OP variable

    NAME            shift and go to state 76
    POINTER_OP      shift and go to state 12
    ADDRESS_OP      shift and go to state 42
    NUM             shift and go to state 57

    addr_var                       shift and go to state 45
    arith_expression               shift and go to state 102
    procedure_call                 shift and go to state 77
    arr_var                        shift and go to state 10
    variable                       shift and go to state 49
    constant                       shift and go to state 44
    expression_term                shift and go to state 75
    pointer_variable               shift and go to state 11
    ppointer_var                   shift and go to state 52

state 91

    (36) arith_expression -> arith_expression - . arith_expression
    (35) arith_expression -> . arith_expression + arith_expression
    (36) arith_expression -> . arith_expression - arith_expression
    (37) arith_expression -> . expression_term
    (38) expression_term -> . variable
    (39) expression_term -> . ppointer_var
    (40) expression_term -> . addr_var
    (41) expression_term -> . constant
    (42) expression_term -> . procedure_call
    (47) variable -> . NAME
    (48) variable -> . arr_var
    (23) ppointer_var -> . POINTER_OP ppointer_var
    (24) ppointer_var -> . pointer_variable
    (25) addr_var -> . ADDRESS_OP variable
    (50) constant -> . NUM
    (46) procedure_call -> . NAME ( call_parameters ) ;
    (49) arr_var -> . NAME [ NUM ]
    (22) pointer_variable -> . POINTER_OP variable

    NAME            shift and go to state 76
    POINTER_OP      shift and go to state 12
    ADDRESS_OP      shift and go to state 42
    NUM             shift and go to state 57

    addr_var                       shift and go to state 45
    arith_expression               shift and go to state 103
    procedure_call                 shift and go to state 77
    arr_var                        shift and go to state 10
    variable                       shift and go to state 49
    constant                       shift and go to state 44
    expression_term                shift and go to state 75
    pointer_variable               shift and go to state 11
    ppointer_var                   shift and go to state 52

state 92

    (52) return_stat -> RETURN addr_var ; .

    }               reduce using rule 52 (return_stat -> RETURN addr_var ; .)


state 93

    (53) return_stat -> RETURN variable ; .

    }               reduce using rule 53 (return_stat -> RETURN variable ; .)


state 94

    (51) return_stat -> RETURN ppointer_var ; .

    }               reduce using rule 51 (return_stat -> RETURN ppointer_var ; .)


state 95

    (56) label -> < BB NUM > . :

    :               shift and go to state 104


state 96

    (55) use_stat -> USE ( ppointer_var ) . ;

    ;               shift and go to state 105


state 97

    (13) call_parameter_list -> empty .

    )               reduce using rule 13 (call_parameter_list -> empty .)


state 98

    (12) call_parameter_list -> , . call_parameters
    (10) call_parameters -> . ppointer_var call_parameter_list
    (11) call_parameters -> . empty
    (23) ppointer_var -> . POINTER_OP ppointer_var
    (24) ppointer_var -> . pointer_variable
    (1) empty -> .
    (22) pointer_variable -> . POINTER_OP variable

    POINTER_OP      shift and go to state 12
    )               reduce using rule 1 (empty -> .)

    call_parameters                shift and go to state 106
    empty                          shift and go to state 86
    pointer_variable               shift and go to state 11
    ppointer_var                   shift and go to state 84

state 99

    (10) call_parameters -> ppointer_var call_parameter_list .

    )               reduce using rule 10 (call_parameters -> ppointer_var call_parameter_list .)


state 100

    (46) procedure_call -> NAME ( call_parameters ) . ;

    ;               shift and go to state 107


state 101

    (45) if_cond_goto -> GOTO label .

    IF              reduce using rule 45 (if_cond_goto -> GOTO label .)
    GOTO            reduce using rule 45 (if_cond_goto -> GOTO label .)
    USE             reduce using rule 45 (if_cond_goto -> GOTO label .)
    <               reduce using rule 45 (if_cond_goto -> GOTO label .)
    NAME            reduce using rule 45 (if_cond_goto -> GOTO label .)
    POINTER_OP      reduce using rule 45 (if_cond_goto -> GOTO label .)
    ADDRESS_OP      reduce using rule 45 (if_cond_goto -> GOTO label .)
    NUM             reduce using rule 45 (if_cond_goto -> GOTO label .)
    RETURN          reduce using rule 45 (if_cond_goto -> GOTO label .)
    }               reduce using rule 45 (if_cond_goto -> GOTO label .)


state 102

    (35) arith_expression -> arith_expression + arith_expression .
    (35) arith_expression -> arith_expression . + arith_expression
    (36) arith_expression -> arith_expression . - arith_expression

    +               reduce using rule 35 (arith_expression -> arith_expression + arith_expression .)
    -               reduce using rule 35 (arith_expression -> arith_expression + arith_expression .)
    ;               reduce using rule 35 (arith_expression -> arith_expression + arith_expression .)

  ! +               [ shift and go to state 90 ]
  ! -               [ shift and go to state 91 ]


state 103

    (36) arith_expression -> arith_expression - arith_expression .
    (35) arith_expression -> arith_expression . + arith_expression
    (36) arith_expression -> arith_expression . - arith_expression

    +               reduce using rule 36 (arith_expression -> arith_expression - arith_expression .)
    -               reduce using rule 36 (arith_expression -> arith_expression - arith_expression .)
    ;               reduce using rule 36 (arith_expression -> arith_expression - arith_expression .)

  ! +               [ shift and go to state 90 ]
  ! -               [ shift and go to state 91 ]


state 104

    (56) label -> < BB NUM > : .

    IF              reduce using rule 56 (label -> < BB NUM > : .)
    GOTO            reduce using rule 56 (label -> < BB NUM > : .)
    USE             reduce using rule 56 (label -> < BB NUM > : .)
    <               reduce using rule 56 (label -> < BB NUM > : .)
    NAME            reduce using rule 56 (label -> < BB NUM > : .)
    POINTER_OP      reduce using rule 56 (label -> < BB NUM > : .)
    ADDRESS_OP      reduce using rule 56 (label -> < BB NUM > : .)
    NUM             reduce using rule 56 (label -> < BB NUM > : .)
    RETURN          reduce using rule 56 (label -> < BB NUM > : .)
    }               reduce using rule 56 (label -> < BB NUM > : .)


state 105

    (55) use_stat -> USE ( ppointer_var ) ; .

    IF              reduce using rule 55 (use_stat -> USE ( ppointer_var ) ; .)
    GOTO            reduce using rule 55 (use_stat -> USE ( ppointer_var ) ; .)
    USE             reduce using rule 55 (use_stat -> USE ( ppointer_var ) ; .)
    <               reduce using rule 55 (use_stat -> USE ( ppointer_var ) ; .)
    NAME            reduce using rule 55 (use_stat -> USE ( ppointer_var ) ; .)
    POINTER_OP      reduce using rule 55 (use_stat -> USE ( ppointer_var ) ; .)
    ADDRESS_OP      reduce using rule 55 (use_stat -> USE ( ppointer_var ) ; .)
    NUM             reduce using rule 55 (use_stat -> USE ( ppointer_var ) ; .)
    RETURN          reduce using rule 55 (use_stat -> USE ( ppointer_var ) ; .)
    }               reduce using rule 55 (use_stat -> USE ( ppointer_var ) ; .)


state 106

    (12) call_parameter_list -> , call_parameters .

    )               reduce using rule 12 (call_parameter_list -> , call_parameters .)


state 107

    (46) procedure_call -> NAME ( call_parameters ) ; .

    +               reduce using rule 46 (procedure_call -> NAME ( call_parameters ) ; .)
    -               reduce using rule 46 (procedure_call -> NAME ( call_parameters ) ; .)
    ;               reduce using rule 46 (procedure_call -> NAME ( call_parameters ) ; .)
    IF              reduce using rule 46 (procedure_call -> NAME ( call_parameters ) ; .)
    GOTO            reduce using rule 46 (procedure_call -> NAME ( call_parameters ) ; .)
    USE             reduce using rule 46 (procedure_call -> NAME ( call_parameters ) ; .)
    <               reduce using rule 46 (procedure_call -> NAME ( call_parameters ) ; .)
    NAME            reduce using rule 46 (procedure_call -> NAME ( call_parameters ) ; .)
    POINTER_OP      reduce using rule 46 (procedure_call -> NAME ( call_parameters ) ; .)
    ADDRESS_OP      reduce using rule 46 (procedure_call -> NAME ( call_parameters ) ; .)
    NUM             reduce using rule 46 (procedure_call -> NAME ( call_parameters ) ; .)
    RETURN          reduce using rule 46 (procedure_call -> NAME ( call_parameters ) ; .)
    }               reduce using rule 46 (procedure_call -> NAME ( call_parameters ) ; .)
    ASSIGN_OP       reduce using rule 46 (procedure_call -> NAME ( call_parameters ) ; .)

